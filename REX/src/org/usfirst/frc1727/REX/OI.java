// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1727.REX;

import org.usfirst.frc1727.REX.commands.*;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;

import org.usfirst.frc1727.REX.subsystems.*;

import java.math.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driver;
    public Joystick operator;
    public JoystickButton gearButton;
    public JoystickButton climberButton;
    public JoystickButton flyWheelButton;
    
    //driver joystick raw constants 
    
    public static final int DRIVER_LEFT_HORIZONTAL = 1;
    //public static final int DRIVER_LEFT_VERTICAL = 2;
    //public static final int DRIVER_RIGHT_VERTICAL = 3;
    public static final int DRIVER_RIGHT_HORIZONTAL = 4;
    public static final int DRIVER_BUTTON_A = 1;
    public static final int DRIVER_BUTTON_B = 2;
    public static final int DRIVER_BUTTON_X = 3;
    public static final int DRIVER_BUTTON_Y = 4;
    public static final int DRIVER_LEFT_BUMPER = 5;
    public static final int DRIVER_RIGHT_BUMPER = 6;
       
    public static final int DRIVER_LEFT_VERTICAL = 1;
    public static final int DRIVER_RIGHT_VERTICAL = 5;
    //PID constants
    public static final double FLYWHEEL_KP = 0;
    public static final double FLYWHEEL_KI = 0;
    public static final double FLYWHEEL_KD = 0;
    
    
    public static final double SHOOTER_CIRR = (2 * Math.PI * 0.0508);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operator = new Joystick(1);
        
        driver = new Joystick(0);
        
        gearButton = new JoystickButton(operator, 2);
        
        climberButton = new JoystickButton(operator, 3);
        
        flyWheelButton = new JoystickButton(operator, 1);
        //flywheelButton = new JoystickButton(driver,);
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriver() {
        return driver;
    }

    public Joystick getoperator() {
        return operator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

