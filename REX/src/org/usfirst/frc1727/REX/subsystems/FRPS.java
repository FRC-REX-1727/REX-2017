// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1727.REX.subsystems;

import org.usfirst.frc1727.REX.Robot;
import org.usfirst.frc1727.REX.RobotMap;
import org.usfirst.frc1727.REX.commands.*;

import com.analog.adis16448.frc.ADIS16448_IMU;

import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 * Feild relative positioning system
 */
public class FRPS extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro yawSensor = RobotMap.fRPSyawSensor;
    private final AnalogAccelerometer xAccelSensor = RobotMap.fRPSxAccelSensor;
    private final Encoder rightDriveSensor = RobotMap.fRPSrightDriveSensor;
    private final Encoder leftDriveSensor = RobotMap.fRPSleftDriveSensor;
    private final AnalogAccelerometer yAccelSensor = RobotMap.fRPSyAccelSensor;
    private final ADIS16448_IMU imu = Robot.imu;

    private double currX;
    private double currY;
    private double currTheta;
    
    private int lCount;
    private int rCount;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public double getYaw()
    {
    	return yawSensor.getAngle();
    }
    
    public double getXAccel()
    {
    	return xAccelSensor.getAcceleration()/9.81;
    }
    
    public double getYAccel()
    {
    	return yAccelSensor.getAcceleration()/9.81;
    }
    
    public int getRawLCount()
    {
    	return leftDriveSensor.get();
    }
    
    public int getRawRCount()
    {
    	return rightDriveSensor.get();	
    }
    
    public double getLVel()
    {
    	return leftDriveSensor.getRate();
    }
    
    public double getRVel()
    {
    	return rightDriveSensor.getRate();
    }
    
    //stub
    private double simpsonIntegration()
    {
    	return 0;
    }
    
    public class FRPSCommand extends Command
    {

    	public FRPSCommand()
    	{
    		requires(Robot.frps);
    	}

    	public FRPSCommand(String name)
    	{
    		super(name);
    		// TODO Auto-generated constructor stub
    	}

    	public FRPSCommand(double timeout)
    	{
    		super(timeout);
    		// TODO Auto-generated constructor stub
    	}

    	public FRPSCommand(String name, double timeout)
    	{
    		super(name, timeout);
    		// TODO Auto-generated constructor stub
    	}

    	
    	protected void initialize()
    	{
    		currX = 0;
    		currY = 0;
    		currTheta = 0;
    		rCount = 0;
    		lCount = 0;
    	}
    	
    	protected void execute()
    	{
    		
    	}
    	
    	protected void interrupted()
    	{
    		
    	}
    	
    	@Override
    	protected boolean isFinished()
    	{
    		// TODO Auto-generated method stub
    		return false;
    	}

    }

    
    
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

