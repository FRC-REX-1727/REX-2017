// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1727.REX;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.TalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainleftDrive;
    public static SpeedController drivetrainrightDrive;
    public static RobotDrive drivetraindrive;
    public static SpeedController flywheelflywheel;
    public static Encoder flywheelflywheelSpeed;
    public static Solenoid gearHopperleftHopperRelease;
    public static Solenoid gearHopperrightHopperRelease;
    public static AnalogGyro fRPSyawSensor;
    public static AnalogAccelerometer fRPSxAccelSensor;
    public static Encoder fRPSrightDriveSensor;
    public static Encoder fRPSleftDriveSensor;
    public static AnalogAccelerometer fRPSyAccelSensor;
    public static SpeedController climberwinchMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainleftDrive = new Spark(0);
        LiveWindow.addActuator("Drivetrain", "leftDrive", (Spark) drivetrainleftDrive);
        
        drivetrainrightDrive = new Spark(1);
        LiveWindow.addActuator("Drivetrain", "rightDrive", (Spark) drivetrainrightDrive);
        
        drivetraindrive = new RobotDrive(drivetrainleftDrive, drivetrainrightDrive);
        
        drivetraindrive.setSafetyEnabled(true);
        drivetraindrive.setExpiration(0.1);
        drivetraindrive.setSensitivity(0.5);
        drivetraindrive.setMaxOutput(1.0);

        drivetraindrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        flywheelflywheel = new TalonSRX(2);
        LiveWindow.addActuator("Flywheel", "flywheel", (TalonSRX) flywheelflywheel);
        
        flywheelflywheelSpeed = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Flywheel", "flywheelSpeed", flywheelflywheelSpeed);
        flywheelflywheelSpeed.setDistancePerPulse(1.0);
        flywheelflywheelSpeed.setPIDSourceType(PIDSourceType.kRate);
        gearHopperleftHopperRelease = new Solenoid(0, 0);
        LiveWindow.addActuator("GearHopper", "leftHopperRelease", gearHopperleftHopperRelease);
        
        gearHopperrightHopperRelease = new Solenoid(0, 1);
        LiveWindow.addActuator("GearHopper", "rightHopperRelease", gearHopperrightHopperRelease);
        
        fRPSyawSensor = new AnalogGyro(0);
        LiveWindow.addSensor("FRPS", "yawSensor", fRPSyawSensor);
        fRPSyawSensor.setSensitivity(0.007);
        fRPSxAccelSensor = new AnalogAccelerometer(1);
        LiveWindow.addSensor("FRPS", "xAccelSensor", fRPSxAccelSensor);
        fRPSxAccelSensor.setSensitivity(0.0);
        fRPSxAccelSensor.setZero(2.5);
        fRPSrightDriveSensor = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("FRPS", "rightDriveSensor", fRPSrightDriveSensor);
        fRPSrightDriveSensor.setDistancePerPulse(1.0);
        fRPSrightDriveSensor.setPIDSourceType(PIDSourceType.kRate);
        fRPSleftDriveSensor = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("FRPS", "leftDriveSensor", fRPSleftDriveSensor);
        fRPSleftDriveSensor.setDistancePerPulse(1.0);
        fRPSleftDriveSensor.setPIDSourceType(PIDSourceType.kRate);
        fRPSyAccelSensor = new AnalogAccelerometer(2);
        LiveWindow.addSensor("FRPS", "yAccelSensor", fRPSyAccelSensor);
        fRPSyAccelSensor.setSensitivity(0.0);
        fRPSyAccelSensor.setZero(2.5);
        climberwinchMotor = new Talon(3);
        LiveWindow.addActuator("Climber", "winchMotor", (Talon) climberwinchMotor);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
