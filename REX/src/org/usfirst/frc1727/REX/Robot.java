// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1727.REX;

import java.awt.Image;

import edu.wpi.cscore.VideoSource;
import edu.wpi.cscore.VideoSource.Kind;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.vision.CameraServer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.*;

import org.usfirst.frc1727.REX.commands.*;
import org.usfirst.frc1727.REX.subsystems.*;

import com.ctre.CANTalon.TalonControlMode;
//import com.ni.vision.NIVision;
import com.ni.vision.NIVision;
import com.ni.vision.VisionException;
//import com.ni.vision.NIVision.Image;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
	private SendableChooser<CommandGroup> autonChooser;

	private Command autonomousCommand;
	private CommandGroup autonomousCommandGroup;
    private Command gearHopperCommand;
    private Command drivetrainCommand;
    private Command climberCommand;
    private Command flyWheelCommand;
    private Command rpmControllerCommand;
    private Command testFlywheelPIDCommand;
    private final Encoder rightDriveEncoder = RobotMap.fRPSrightDriveSensor;
	private final Encoder leftDriveEncoder = RobotMap.fRPSleftDriveSensor;
	//private final AnalogGyro gyro = RobotMap.fRPSyawSensor;

	
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drivetrain drivetrain;
    public static Flywheel flywheel;
    public static GearHopper gearHopper;
    public static FRPS fRPS;
    public static Climber climber;
    public static Intake intake;
    public static ArduinoCommunication arduinoCommunication;
    
    public PIDNetworkTable pidNetworktable;
    
   // private static CameraServer firstCam;
    
    private static int currSession;
    private static int sessionfront;
    private static int sessionback;
    private static com.ni.vision.NIVision.Image frame;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	autonChooser = new SendableChooser<CommandGroup>();
    	autonChooser.addDefault("Middle Auton", new MiddleAutonCommandGroup());
    	autonChooser.addObject("Right Auton", new RightSideAutonCommandGroup());
    	autonChooser.addObject("Left Auton", new LeftSideAutonCommandGroup());
    	SmartDashboard.putData("Autonomous Mode Chooser", autonChooser);
        drivetrain = new Drivetrain();
        flywheel = new Flywheel();
        gearHopper = new GearHopper();
        fRPS = new FRPS();
        climber = new Climber();
        intake = new Intake();
        arduinoCommunication =  new ArduinoCommunication();
        pidNetworktable = new PIDNetworkTable();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        Robot.gearHopper.getGearCompressor().setClosedLoopControl(true);
        autonomousCommand = new AutonomousCommand();
        gearHopperCommand = new OpenGearHopperCommand();
        drivetrainCommand = new DrivetrainCommand();
        climberCommand = new ClimberCommand();
        flyWheelCommand = new FlyWheelCommand();
        rpmControllerCommand = new RPMControllerCommand();
        autonomousCommandGroup = new AutonomousCommandGroup();
        testFlywheelPIDCommand = new TestFlywheelPIDCommand();
        //CameraServer.getInstance().startAutomaticCapture();
        //firstCam = CameraServer.getInstance();
        //firstCam.addAxisCamera("cam0");
        //firstCam.addAxisCamera("cam1");
      
        /*
        frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);

        sessionfront = NIVision.IMAQdxOpenCamera("cam0", NIVision.IMAQdxCameraControlMode.CameraControlModeController);
                
        sessionback = NIVision.IMAQdxOpenCamera("cam1", NIVision.IMAQdxCameraControlMode.CameraControlModeController);

        currSession = sessionfront;

        NIVision.IMAQdxConfigureGrab(currSession);
        
        */
        //CameraServer.getInstance().addAxisCamera("cam0");
        //CameraServer.getInstance().addAxisCamera("cam1");
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
       //if (autonomousCommand != null) autonomousCommand.start();
    	autonomousCommandGroup = (CommandGroup) autonChooser.getSelected();
    	autonomousCommandGroup.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        climberCommand.start();
        drivetrainCommand.start();
        rpmControllerCommand.start();
        gearHopperCommand.start();
        flyWheelCommand.start();
        testFlywheelPIDCommand.start();
        /*
        Robot.flywheel.getTalonFlywheelSpeed().changeControlMode(TalonControlMode.Speed);
    	//Robot.flywheel.getTalonFlywheelSpeed().setPID(OI.FLYWHEEL_KP, OI.FLYWHEEL_KI, OI.FLYWHEEL_KD);
        //Robot.flywheel.getTalonFlywheelSpeed().setCloseLoopRampRate(0);
    	Robot.flywheel.getTalonFlywheelSpeed().setF(1);
    	Robot.flywheel.getTalonFlywheelSpeed().setP(OI.FLYWHEEL_KP);
    	Robot.flywheel.getTalonFlywheelSpeed().setI(OI.FLYWHEEL_KI);
    	Robot.flywheel.getTalonFlywheelSpeed().setD(OI.FLYWHEEL_KD);
    	//Robot.flywheel.getTalonFlywheelSpeed().pidGet();
    	
*/
    	// 	Robot.flywheel.getTalonFlywheelSpeed().clearStickyFaults();
    }

    /**
     * This function is called periodically during operator control
     */
    private boolean ledFlag = true;
    private boolean ledBtnIsHeld = false;
    private boolean cameraFlag = true;
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //oi.gearButton.whileHeld(openHopper);
        //oi.climberButton.whileHeld(climberCommand);
        //Robot.flywheel.getTalonFlywheelSpeed().set((RPMControllerCommand.targetShooterRPM * OI.RPM_TO_POSITION_PER_10MS));
        SmartDashboard.putString("test string", "the compressor is on");
        //System.out.println("Left Encoder: " +  leftDriveEncoder.getDistance() + " Right Encoder: " + rightDriveEncoder.getDistance() + " gyro: " + gyro.getAngle());
    	/*
        if(Robot.oi.switchCameraButton.get()){
    		
    		if(cameraFlag){
    			cameraFlag = false;
    		}
    		else{
    			cameraFlag = true;
    		}
    		
			if (currSession == sessionfront) {
				NIVision.IMAQdxStopAcquisition(currSession);
				currSession = sessionback;
				NIVision.IMAQdxConfigureGrab(currSession);
			} else if (currSession == sessionback) {
				NIVision.IMAQdxStopAcquisition(currSession);
				currSession = sessionfront;
				NIVision.IMAQdxConfigureGrab(currSession);
				
			}
			
    	}
    	NIVision.IMAQdxGrab(currSession, frame, 1);
    	CameraServer.getInstance().setImage(frame);
    	*/
    	if(Robot.oi.ledButton.get()){
    		if(ledFlag && !ledBtnIsHeld){
    			RobotMap.ledSwitch.set(Relay.Value.kOn);
    			ledFlag = false;
    		}
    		else if(!ledBtnIsHeld){
    			RobotMap.ledSwitch.set(Relay.Value.kOff);
    			ledFlag = true;
    		}
    		ledBtnIsHeld = true;
    	}
    	else{
    		ledBtnIsHeld = false;
    	}
    	
    	/*
    	if(cameraFlag){
    		 CameraServer.getInstance().getVideo("cam0");
    		 CameraServer.getInstance().startAutomaticCapture();
    	}
    	else{
    		 CameraServer.getInstance().getVideo("cam1");	
    		 CameraServer.getInstance().startAutomaticCapture();
    		 
    	}*/
    	
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        SmartDashboard.putString("test string", "the compressor is on");
        
    }
}
